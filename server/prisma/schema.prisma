generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model User {
    id         Int        @id @default(autoincrement())
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    email      String     @unique
    auth0Id    String     @unique @default("")
    name       String?    @db.VarChar(255)
    picture    String?
    about      String?    @db.VarChar(255)
    company    String?    @db.VarChar(255)
    occupation String?    @db.VarChar(255)
    gender     String?    @db.VarChar(255)
    posts      Post[]
    berries    Berry[]
    comments   Comment[]
    followers  User[]     @relation("UserFollows", references: [id])
    followings User[]     @relation("UserFollows", references: [id])
    activity   Activity[]
    // Follows    Follows[]
    // Follows    Follows[]
}

model Post {
    id        Int        @id @default(autoincrement())
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId  Int
    title     String     @db.VarChar(255)
    body      String     @db.Text
    comments  Comment[]
    berries   Berry[]
    tags      Tag[]
    activity  Activity[]

    @@fulltext([body])
    @@fulltext([title])
}

model Berry {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId    Int
    post      Post     @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    postId    Int
}

model Comment {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    content   String   @db.VarChar(255)
    post      Post     @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    postId    Int
    user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId    Int
    parentId  Int?
}

model Tag {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    posts     Post[]
}

model Activity {
    id     Int  @id @default(autoincrement())
    user   User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId Int
    post   Post @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    postId Int
    type   Int
}

//1 -> create post
//2 -> new berry on post
//3 -> new comment on post
