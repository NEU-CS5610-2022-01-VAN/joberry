generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model User {
    id         Int        @id @default(autoincrement())
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    email      String     @unique
    name       String?
    auth0Id    String     @unique @default("")
    about      String?    @db.VarChar(255)
    company    String?    @db.VarChar(255)
    occupation String?
    gender     Int?
    posts      Post[]
    berries    Berry[]
    comments   Comment[]
    followers  User[]     @relation("UserFollows", references: [id])
    followings User[]     @relation("UserFollows", references: [id])
    activity   Activity[]
    // Follows    Follows[]
    // Follows    Follows[]
}

model Post {
    id        Int       @id @default(autoincrement())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId  Int
    title     String    @db.VarChar(255)
    body      String    @db.Text
    comments  Comment[]
    berries   Berry[]
    tags      Tag[]

    @@fulltext([body])
    @@fulltext([title])
}

model Berry {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId    Int
    post      Post     @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    postId    Int
}

model Comment {
    id               Int       @id @default(autoincrement())
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    content          String    @db.VarChar(255)
    post             Post      @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    postId           Int
    user             User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId           Int
    parentId         Int?
    parentComment    Comment?  @relation("CommentHistory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    childrenComments Comment[] @relation("CommentHistory")
}

// model Follows {
//     follower    User @relation("follower", fields: [followerId], references: [id])
//     followerId  Int
//     following   User @relation("following", fields: [followingId], references: [id])
//     followingId Int

//     @@id([followerId, followingId])
// }

model Tag {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    postId    Int
    posts     Post[]
}

model Activity {
    id     Int  @id @default(autoincrement())
    user   User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId Int

}
